<?xml version="1.0" encoding="UTF-8"?>
<beans	xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- 自动扫描与装配bean -->      
    <!-- <context:component-scan base-package="*"></context:component-scan> -->
    
	<bean id="date" class="java.util.Date"/>
	<!-- com.mchange.v2.c3p0.ComboPooledDataSource类在c3p0-0.9.5.1.jar包的com.mchange.v2.c3p0包中 -->  
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
	    <property name="driverClass" value="com.mysql.jdbc.Driver" />  
	    <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true" />  
	    <property name="user" value="root" />  
	    <property name="password" value="" /> 
	    <!-- <property name="useUnicode" value="true" /> 
	    <property name="characterEncoding" value="utf-8" /> 
	    <property name="autoReconnect" value="true" />  -->
	</bean> 
	
	<!-- org.springframework.orm.hibernate4.LocalSessionFactoryBean类在spring-orm-4.2.4.RELEASE.jar包的org.springframework.orm.hibernate4包中 -->  
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
	     <property name="dataSource" ref="dataSource" />  
	     <property name="configLocation" value="classpath:hibernate.cfg.xml" /> <!-- 加载hibernate配置文件 -->  
	</bean>
	
	<!-- 配置事务管理器 -->
	<!-- org.springframework.orm.hibernate4.HibernateTransactionManager类spring-orm-4.2.4.RELEASE.jar包的org.springframework.orm.hibernate4包中 -->  
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
	     <property name="sessionFactory" ref="sessionFactory" />  
	</bean>
	
	<!-- 配置advice的目的是指定哪些方法需要什么类型的事务模式 -->
	<tx:advice id="advice" transaction-manager="transactionManager">  
	    <tx:attributes>  
	        <tx:method name="save*" propagation="REQUIRED"/>  
	        <tx:method name="update*" propagation="REQUIRED"/>  
	        <tx:method name="delete*" propagation="REQUIRED"/>  
	        <tx:method name="*" propagation="SUPPORTS"/>  
	    </tx:attributes>  
	</tx:advice>
	
	<!-- 配置AOP切面 -->
	<aop:config>  
	  <!--  配置哪些包的类要切入事务   -->
		<aop:pointcut id="pointcut" expression="execution(* com.zcy.shop.service.impl.*.*(..))" />  
	    <aop:advisor advice-ref="advice" pointcut-ref="pointcut"/><!-- 连接了上面的advice和上面的pointcut -->  
	    <!-- aop:pointcut要写在aop:advisor上面，否则会报错   -->
	</aop:config>
	
	<context:component-scan base-package="com.zcy.shop.."/>
	
	<!-- 第二种方式是使用注解的方式注入，主要用在java代码中使用注解注入properties文件中相应的value值 -->  
	<bean id="prop" class="org.springframework.beans.factory.config.PropertiesFactoryBean">  
	    <property name="locations"><!-- 这里是PropertiesFactoryBean类，它也有个locations属性，也是接收一个数组，跟上面一样   -->
	        <array>  
	            <value>classpath:public.properties</value>  
	        </array>  
	    </property>  
	</bean>

	<!-- 泛型类是不能实例化的，所以要加lazy-init属性 -->  
	<!-- <bean id="baseService" class="com.zcy.shop.service.impl.BaseServiceImpl" lazy-init="true">  
	     <property name="sessionFactory" ref="sessionFactory" />  
	</bean> 

	<bean id="categoryService" class="com.zcy.shop.service.impl.CategoryServiceImpl" parent="baseService"/>
	<bean id="userService" class="com.zcy.shop.service.impl.UserServiceImpl" parent="baseService" /> -->
	
	<!-- 如果是prototype类型，默认是使用时创建，不是启动时自动创建 -->  
	<!-- <bean id="baseAction" class="com.zcy.shop.action.BaseAction" scope="prototype">  
	     <property name="categoryService" ref="categoryService"></property>  
	     <property name="userService" ref="userService"></property> 
	</bean>

	<bean id="categoryAction" class="com.zcy.shop.action.CategoryAction" scope="prototype" parent="baseAction"/> 
	<bean id="userAction" class="com.zcy.shop.action.UserAction" scope="prototype" parent="baseAction"/>
	<bean id="sendAction" class="com.zcy.shop.action.SendAction" scope="prototype"/> -->
</beans>